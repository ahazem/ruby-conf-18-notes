Please stand by for real time captions.
>> [ Captioner on standby waiting for event to begin.  If there has been a change, please contact event organizer or  VITAC at 800-590-4197 or cc@captionedtext.com  Thank you ]for event to begin.  If there has been a change, please contact event organizer or  VITAC at 800-590-4197 or cc@captionedtext.com  Thank you ] Please stand by for real time captions.
>> Good morning how is everyone doing? How was last night? Were you in the Nation Building? Good. Maybe you guys can bring your shoes next time. That way we can all go for a run. Let's talk about parties. Tonight we have two parties going on. So do check out the parties page. They are doing a karaoke and it is such a long walk that I would see if you could get a ride. Would you guys please RSVP so we know who 
>> [ No audio ]
>> This is pretty cool history. I think we will start with Eric.
>> Thank you.
>> Good morning. How is everyone today? Well come, Welcome and today we want to talk about how to build authentic [Indiscernible ] . The star of the show is, community your -- and I want to tell you a little bit. My name is Sharon Yitbarek  and IM -- I am an immigrant. My father came to the US first and then my mother and I followed the -- and I grew up in a very typical Ethiopia household. If you do not know about Ethiopia do not worry I will tell you all about it. People did believe in education. He believed if you got a good grade, you should always get an A plus and he really believe then you could go to a good college. Like Harvard. He did not really know about Ivy leagues but he did know about Harvard. He wanted me to go into the most respective career which is being a doctor. But I failed. But he thought you would have a life, I would not say necessarily happy but successful. And he did not want me to be happy he wanted me to be successful. And so in order for me to follow, I had to have a distraction free environment. Having friends over, to have fun, absolutely not. Going to someone else's houses, where they were not doing homework? I do not think so. And the ultimate distraction, voice. -- boys. So the only community that I really knew and interacted with was the Ethiopia immigrant community. It is a relatively vulnerable one. Because everybody left everything behind. They went from one country to another country. It was a new world. And so many other kids did well. And they did typical stuff. They would have a family, and spouse. Many of them had to start a new career because their degree did not transfer. So when I got here, that's what so when they got -- when they got here they were not always safe. So the only safe place in our home was the living room. This is me and my mommy. We are so cute. And my mother was a community organizer. At at that point, when I was a kid, I would say this is a nice lady and she could cook good food. But nobody wanted to hang out with us. So looking back, we had a lot of nice people in our community. A lot of people could cook well. And there were people with bigger living rooms and more resources. So what made our living room magical? There are a few things that my mother did. She created a magical living room. She was the first to serve and last to eat. She would walk around and make sure that your plate was full. And maybe if she had a chance, she would grab a plate. She was so focused on making sure that we were taken care of. So what she told us, that we were the most important people in the room. Our needs were valued. The other thing she did, she lived by observing. She did not open the door and say, welcome to my party. But she watched. She would make sure you were happy and she would notice little things. She would notice, you did not eat from one of my dishes. Is something wrong? I would say, it is too spicy. She would say, okay. And she would not say anything. The next time, she would have a set of dishes, with [Indiscernible ] and she would pull you aside and say  this is for you. There was no announcement on how thoughtful she was. But she was observing. And she made you feel like, that you were important. The last thing she did, she would gather little problems. So as you know Thanksgiving is a American holiday. And we do have the day off and we are in America so we do celebrate that we have family over. She would do the turkey and mashed potatoes. One Thanksgiving if you years ago, we forgot gravy. And I said to my mom, we forgot the gravy. What are we going to do? Do we -- and do we have to go to the gas station to get gravy? How do we solve this problem? My mother said do not worry I will take care of it. So she grabs flower and spices that you -- she grabbed flour and spices and she made the best tasting gravy. You have to remember we do not really eat gravy. We do not do turkey gravy. But anyway she figured it out. Everyone was standing, watching and waiting for the gravy. At the end of the day Thanksgiving was not ruin because we did not have gravy. She jumped on it and she figured it out. And she made dinner more delicious for us. If you abstract some of the steps I talked about you might notice, there is a pattern. And the pattern is, she building. She was learning, she was observing and she was taking a step back. Do all of the steps look familiar? I hope they do. This is just like product building. This is something that we do all of the time. What are you doing? And it is not fundamentally different from what we are doing. Look at the sinks. -- Look at these things.
>> By doing all of these things she made us feel like we were valued. She made sure that we were safe. I am now an adult. I decided I want to learn to write code. And the code looks like this. Learning the code was painful and difficult. And the computer was always right. So I did this for a few months on my own and I decided to apply -- to school. When I got to boot camp, I was in a room with 30 other people who understood, what it felt like when nothing worked. And so for me the biggest value was the community. And when I graduated I felt so lucky and I was so excited. So when I graduated I was so excited because I was a real developer -- and I learned all of this stuff. That community of students, help me get across the finish line. The problem, that community and boot camp, cost me $11,000. And frankly this was on the cheap and. -- end. Even if you could afford that, not many people can go six months without an income. So this is considered a investment. Community is key. Community is everything. Do not worry. I am going to do something. I decided I was going to build a way for people to have that sense of community. I built something called code B. How many have chatted? A twitter chat, is a hashtag. You pick a time, during the day, and you deal with that twitter chat. You all get on twitter. You look at the hashtag. And you use the hashtag. And you can have a conversation that you can follow. So now I have this twitter chat medium. This is a way to find other developers. And at that point, this was three years ago, it seemed like everyone was doing a twitter chat. So I said, how do I build a magical twitter chat? How will it look? How will it be magical? We have three rules. To start off this way, and we done hundreds this way, what we are doing, telling you how we are going to behave and how you are going to behave. You better be nice and you better be helpful. And it signals to everyone else, what they have to accept if they want to join. If you need support or if you need help, this place will give you that. And the other thing we did, we were disgustingly, nice. If you tweeted us and said, I just finished a coating tutorial. You know what you will get? Five happy face him OG's -- happy emoji. What we are doing, we keep out people we find who is annoying. Can you go -- can you imagine if somebody said, you are so ugly and we respond by saying, we love you?[Laughter] 
>> It sounds like you what everybody in the community but you do not. You want to keep out the bad people. So when you are disgustingly nice with people they do not want to have a discussion with you. And that is totally fine. And I appreciate how serious this is. A few years ago, I woke up and had this horrible pain in my right shoulder. I could not even lift up my arm. Two minutes before the twitter hashtag started it was so bad, I was crying in pain. My has been, who is sitting right here. Raise your hand. He is so fine.[Laughter] [ Applause ]
>> My poor husband looks at me and says, I think we should go to the emergency room. I said no. I said I will dictate and you will type. So people were twitting. I would say to him, congratulate Susie. And so you are sending happy emoji to everyone now you realize how important this work really is. [Laughter] 
>> It is so important to say all of these wonderful things. Then I started to get a few messages, that said I love what you are doing. Let's give everybody support. When you do your twitter chat, it is 2 AM in the morning for me. Or I am at school. So this is when I realize that the developer and twitter have a comment -- common enemy. The footnote.[Laughter] . I was say, what am I going to do? I cannot twitter every single hour. Because I did have a full-time job. But if I could I could not do a chat every single hour. Maybe we could do with the alternate chat? Maybe we can do a morning chat Sunday morning. You can say, here is what I did this week. But here is the thing. If those people had not spoken up, we would not have a Sunday morning chat. Because that was an issue that was not on the top of my head. So now the chat is going awesome. But I realize with the twitter chat twitter is a great way to discover new people. It is so quickly and more efficiently getting -- on getting information. So I said, what is the better way? I thought, podcasting. This is a really great tool. When I looked at the technical podcast, what I understood, there are a lot of technical stories. It shows about how to nerd out eke out which is awesome. It is so interesting on who you can do this with. There is the whole story element. The people, the where and the how. And I found this was overlooked during the podcast. So I decided I was going to build a code. But how do you build a podcast that is magical? What does it look like? What does it mean? And so in our community it is important, about validation. This is huge. When you think about developers, they are dominant. You probably went to the top 10 school and now you are working at a big tech company. Or the other one is, you were born with the computer and you have been writing code since birth. But I knew that was not true. I knew that people became developers from multiple backgrounds. So what I did, I try to invest -- we try to think about race and gender. We look that languages. And how they became developers. We would hear stories of people, who have been writing code the day they were born. Here we have Chad [Indiscernible ] is another  good example, who did not start writing code until he was 22 or 23. So we created [Indiscernible ] . So if you want to do it and you put in the time, you belong here. So validation is super important. But yes you can do this. There is the fear that says, I am not made for this or I am not bored for this -- born for this. But there are so many ways to do this. This is the way you can pick your guests. A lot of times in our shows we do talk about technical things. Sometimes there is a technical term that the audience is not familiar with. Or they would say we test your code. But can you define what testing is? Especially for people who are not familiar with it. But can you define testing for someone who does not know what testing is? I know what testing is. You know what testing is. Other people should know what testing is. But we have to help them out. Sometimes it feels like charity. But it could be a little reminder for, kind of like saying, I should have known what that was. Or I have heard about that before but can you explain it? I tried to be the audience or try to be the person who does not know. After shell I have friends who will tell me, I know you know what that is. [Laughter] . But that is not the job. The other thing, I try to get out of the way. I am the hose, executive producer. But I am the least important person. I have to get out of the way. This is episode number eight. As you can see, the top row is my audio in the bottom is Chad's as you can see I do not say that much. In fact, I am not saying anything it is most that's mostly like sound effects. If you can mail the sound effects down you will be good -- nail the sound effects down you will be good. But it was Chad, it was his story. So I tried to give him the space he needs. This is one that we did with Scott Hamilton. I think Scott did talk a little bit more than Chad. But that was okay. The audience learned not for me. -- not from me. About a year ago we started a brand-new show. This came from a woman named [Indiscernible ] . I need to take you all everywhere because you are awesome. But anyway she graduated from the Flatiron school. That she did not have a computer science degree. But she wanted a -- in education. So she decided to teach herself. So she was going to log every week -- blog every week. When I saw this announcement I said, okay. This is a lot of worry that and work that might this is all -- this is a lot of worry and this is a lot of work. We need to make this accessible to the whole community. Now we do 20 episodes. And she is the teacher and she is teaching the computer science. Raise your hand if you have heard about Cortex? -- Someone said this is just like Car Tech for community -- for the computer community. I said thank you for putting this together it is so helpful. And it is important to me, I am blind. So a lot of the education is not made for me. And this is one of the [Indiscernible ] that actual  works. But when I read that, I was say, all of the stuff that I was doing, not once did accessibility cross my mind. So I question, how does this affect people in different ways? And in that email, it brought my attention to the fact about what happens if you cannot hear? You cannot listen to the podcast so what do you do? Now we do transcripts. But here is the thing. If that one listener had not spoken up, we would not have a transcript. This is something that I did not think about. Podcasts and twitter are all online products. You can participate you can download and you can subscribe. There is something about being, in real life. It is like being in this room and looking at all of your beautiful faces. There is something special about that. In my own career as a developer, this was super important to me. I really wanted to do something. Most conferences are not made for newbies. How many newbies do we have? I want to develop a conference for newbies. I want to make it magical. But what makes a magical conference? There are a few things that are important. It is important to follow and understand the talk. To be able to say, this is a good idea. When they go to technical talk, even if they are called beginner friendly I ask myself, is it really beginner friendly? When you learned your first language, it hurts. You do not know how to navigate the docs. And you should read them and not run from them. And remember you did not break the machine. It is all about learning the first language. Which can be hard. With your second language it is easier. You should consider reading the error message. So it is easier for you to look at something, and say that is totally normal. So when a developer hits the robot, that's what robot they will -- so when the developer hits a roadblock they will say, I need to do something different. So we have all of these buzzwords. And sometimes they are overwhelmed. Or frustrated. So to come back this and to help people, we created these conferences. And the conference booklet -- it is totally worth it. They can say I need two things from you. I want resources, so if they want to learn more about a topic they know where to go. And definitions. For every single talk, you get a little cheat sheet. So you have your terms and your definitions. So you know what the talk is for. And it is a great way, we are here. We are taking care of you. And this is so helpful. And the other thing that is super important, we need to understand, the Y -- the why. I know we get very excited about implementation. But we have to stop and say, who is this for? What are the side effects? For the new developer the bigger picture is super important. To make sure that we address this, I personally coached [Indiscernible ] . I went through their talk outline in their slides. I made sure that the message was going to connect with the audience. And the last piece, which is the most important one, the conference need to be financially accessible. Conferences can be super expensive. And a lot of us may take that for granted because we are working for a company that will pay for our hotel. Or they will subsidize a lot. But in some communities, they do not have a job yet. They could be teachers, nurses or bus drivers. So if they want to go to a conference they have to pay for it. Sometimes it is that -- a couple hundred dollars or $1000. One thing I appreciate about Ruby, conference, they try to move around. They tried to make it geographically accessible. So if you are a new developer, there is a big flight expense that you have to pay for. They could spend thousands of dollars for three days that may or may not help them become a better developer. So what we did to help the financial burden, we have what is called the opportunity scholarships. We cover what ever it is, whether it is the flight or Metro tickets. So conferences are off present -- conferences are so awesome. At a conference if you forget something or you miss something entirely, there is not much that you can do about it. And you have to take notes and hope you did it better. But here are the things that I wish I had done. We are going to call this Learning. One of the things that I learned, was captioning. Set up close captioning for every conference. [ Applause ]. How about that? This is something that I did not think about for my first conference. About a week before the conference they said are you going to do close captioning? It did not even cross my mind. What about childcare? How about having childcare at a conference? [ Applause ]. This is something that was not on my mind. Next one dietary restrictions. I asked everyone, about the dietary restrictions. I also told they cater your -- caterer to label the food. So we did not know if it was vegan or gluten-free. So people were trying to look for food that they could eat. Now they can find it. And here is a sweet attachment tweet -- and here is a tweet, I was worried about stalking. So there is a sticker that you can put on your badge that says, do not take a photo of me. This is from Hunter, where are you? Hunter tweeted directly at us. He said, do you want to ask people if they want a sticker when they sign in? So the next conference, I decided to fix all of these things. I am prior -- I am proud to say that we do have close captioning, childcare and dietary restrictions and stickers. But here is the thing. If all those people had not spoken up and said, hey have you heard about this, we would not have billed a better conference -- build a better conference. So I say now, look at all of the things that we did not get right the first year but look at how we improved the second year. Is there anything that we missed this year? Please keep your feedback coming. You can email me. Just let me know. For next year. After the conference, -- the first conference when I got back to my hotel room and I open up my email it was filled with feedback. On how to make the conference even better. So someone said, you should have a water cooler instead of water bottles. We had over 1000 water bottles. I was thinking it was super convenient. Because you could just grab and go. It is great for the conference but terrible for the earth. That was something that was brought to my attention. We had a few attendees trying to find a private place to pray. And so they say, this is something that you should think about next year. One of the lunches that we had was called a picnic. We had fried chicken, mashed potatoes. And I thought it was delicious. But when you have a menu that is that heavy and you are sitting in a room, and you have a lot of people, you get sleepy. And it may be hard to pay attention if you just had mashed potatoes. So now we have options. This never occurred to me. Because I love potatoes. And another one was bigger seats. Somebody wrote and said, I am a bigger person. And the chair is so small. And I was sitting there all day so it hurt my body. So I read these things. You can see this list. Now I have to worry if my furniture is inclusive. Now I have to think about all of these things. So now there are so many things to do. And so now my list is a whole lot longer. Now I had a list of things that I missed. So I was reading all of these emails but I was grateful. I was so thankful that people reached out to me. One email that I got from a woman, who gave me thorough feedback. I said thank you so much because it did give me a lot to think about. And I told her, you were so helpful, I want you to go to my other conferences. And she responded and said, this is the first time that I have done it -- giving me feedback -- she said she knew that I would do it. Many people do believe that I would fix it. But how did they know? How did they know that I would care enough to do all of these things? Because a lot of this is completely invisible. You do not see me sending hundreds of emails. You do not see me on the telephone. You do not see me carrying hundreds of booklets to my car. In fact the only thing that you see, or hear my voice asking questions and that is that. Most of the work is invisible. There is nothing that you can point to in say -- this thing that she does -- this huge X -- so how do you know? The only thing that is there, are the little acts. The little interactions. And it turns out that is what matters. Small consisted acts that build trust. It is not just one project. Not just one initiative. But it is part of the story. But it is just one part. It is small consisted acts. Constantly going through the loop, understanding, listening. Listening to the big and small problems. And this is what community building looks like. And when you do these things over and over again, that will make people feel safe and welcome. And you will eventually find your community. It is wonderful. And hopefully you found that today at this conference. So when you find people that are going to support you, love you and help you it is great. To belong and to be understood is amazing. But to create this environment is a lot of work. There is always something that you have to build or fix or make builder -- better. I know it is just like my mother, making the living room a magic place. She would always collapse at the end of the event. And she would sit and say I am so tired. But I would look at what she did. And I definitely did not want to be like that. But as I get older I am slowly churning into my mother. -- All I wanted was to be like her. I want to make you feel safe and welcome. Thank you.
>> [ Applause ] 
>> They Q -- thank you. What you see right now, it's not like it was a few years ago. We have such a great day.
>> [ Captioner standing by waiting for the next session to begin. Thank you ]
>> Hello everyone we're going to go ahead in get started -- and get started. I am the director for Track today. We have great talks for you today. As we go later through the day, [Indiscernible ] . Michael Harold, he spends his time writing and interviewing for his times. He contributes to open source projects and hashing. Michael does a visit national parks. Please welcome Michael Harold.
>> [ Applause ] 
>> Good morning everyone. How are you doing this morning? Did you have a good time at the party? Is everyone awake? How about this venue? We are in the Crystal Ballroom. And so live streaming looks like this. But it makes me nervous.  Because I think [Indiscernible ] is going to pop up and heckle me . Given where we are I want to be crystal clear about what I am talking about. [Laughter] 
>> No need to be fuzzy. But anyway. Now that all of my terrible puns are out-of-the-way, I want to talk about some -- subclassing hash. And if you have any questions, you can say hello. We are a company, for Word Press. But do not worry. We are looking for an engineer manager, if you are looking for a new job go ahead and talk to me. All right. So this talk, this is about Shashi -- this is going to make caching more powerful. It also might think -- more power -- but let's get back the Schmidt -- and so with great power comes great responsibility. To air is to be human -- to error is to be human.
>> We have three different bugs. And three different portions of the Hashing  library. And this is the frame for our story. First we will talk about the Hash extension. If you are a developer, you know it is access in support. It gives you the power without having to use active support. There is a bug in Hash library. To start off. Extensions. I wake up one morning and there is a bug report. It is a good report and it is very thorough. So if you look at the sample code you can see they have a subclass hash. If you know how Hash works out of the box, and it looks a little bit like this. And we get Hash get meow. But that is not where the bug lives. And here we have the different access. And this is where the problem lies. We can see that we can access the Hash with a Cat and this is the in different portion of the Hash. And you do not have to remember if you are using string keys. Especially when you are dealing with things that user has in place and things like that. And we get the Hash with a string of Dogs. Are you with me so far? So we are going to create our Hash again. And we want to grab the Dog Hash. Where we get no method error. But I do not see that anywhere. So when we look at the different and access, the extension, we have a merge method. This is called Super, and it reverts on the resulting [Indiscernible ] . And we have the convert method. So what is happening here? So we have the Hash so why do we not have access to the convert method? So we look at our Hash. We respond to the convert. I love Ruby. One of the favorite things in Ruby -- do you guys know what this is? I respond to convert. Then you respond. Then you have the Hash within the hash. Then you hit, true. So what is happening? We need to go deeper. So this is an introduction into my favorite tool. Anybody a fan of Ran -- Prime bug? And so this is how I go about diagnosing. So I urge the -- so I insert something like this. So we are going to tap into Super. This is the method on the object. This will access the object that you called, Cop on the Schmidt -- Tap on.
>> Now we can figure out what is going on. Then Tap returns. There is no functionality changes. We are going to say convert on the results. And when we do this, we call Hatch -- Hash Merge [Indiscernible ] . Now we can type in, interactive variables. The first thing is I want to know, and what I am dealing with. We see the result is Hash. And so they match and so they should be behaving similarly. We hit convert. Then we ask for the result. And didn't respond to the convert -- and did it respond to convert? Single 10 class, this is the instant of the class that the object is at a given point in time. When you call a method on the object, it crawls the singleton ancestors. To see if each module has a method on it. We can see we have the in different extension with the ancestors. That is why the South response to the convert. When we asked the same question, we see that the singleton class does not see the different extension and that is why we have a bug. So it does not know how to convert. And because of this we know we need to make sure that we -- the result of merge gets different access. Without doing that, it is just a normal Patch you have to respond to. Because of the implementation of the Merge method. When we do that Merge method we get Super. This is caching the implementation of the Merge. So what we get back from this, is a normal Patch even though we are asking for different access extension to give us the result. So in order to fix this read -- we are going to change this line. We are going to grab the Super result. And the result singleton class has different access in the ancestor list. Now they can respond to the convert. Once we make this change, we can run our test again. Bring up the, my hash. Look at the breed. Now it works. So why was this a problem? The source of the bad -- bug was because we called Super. This allows us, now we can change multiple extensions together and they can interoperate. But because we are coming from Hash, the base of Super is going to be the hash clash merge method. This is a singleton. If you ask how many public methods it has, currently there is 178. Aaron Patterson in 2014 route how this method is killing him. Talking about a memory link that happening rail. They use the action control parameters. Because there are 878 methods he goes on to explain you need to handle all of those methods because it is part of the class. I am not sure about any of you -- I would have a hard time covering 178. I'm not sure how to do that effectively. So we have to do this within our own code but that was just one problem. And it was easy to fix once we learn how to dig in. But let's look at a second problem. Mash. I wake up another morning, I get a a message. This is a pretty good bug report that explains to me what happened. How many people use Ashy? -- Hashy?
>> We do use they Mash inside of our application. And this is our library.. Assessment and 2014 -- through this blog he is talking about mash. He noticed that once you add [Indiscernible ] , to the Rail application, it means every single endpoint that 5% lower. Every single one. So he was trying to fix that. But it is a very interesting read. Let's go back to Mash. And it works a little bit like this. We say do you have a name property? And we can verify the batch name. We can also set the name. And when we ask for the name we get back Mash name back. And we have a main property set. And this is what people move -- use. That you will see here in a second. So if you Pasha Past -- so if you pass the hash key it will pass down. This is implemented through Method Messing. This is one of the sharpest tools. The implementation for this, if you receive a message that you do not know about, and you have a key that matches the method name will return. That gives us the ability to say, name, on mash. So we look at the suffix. If they key ends in the equal sign we will assign a property. If it is a question mark we see if there is a value with the hash. And you can build the next level of the Hash. If you ever need to generate the data structure, which I never recommend using. Then we can fall back to accessing our reader method. If none of the suffix exist. Clear as mud. There is one responsibility for this class. Mash was originally -- you could use it for Jason responses. And the reason it says that, is because that is what people would do. I am guilty of this. I have written more than one API client memory -- library. We get the response from the server and we converted into the hash. Now you do not have to define that interface. Now nothing bad can happen. But remember Mash is a Hash. It is in the definition of what we want Match to be. And remember there are 178 public methods. Here we have length and trust. But what happens if we say that we have a Hash Mash ? And you call the ZIP and you get a weird response. It is a great method but this is not what we want in this case. And because we implement all of the behavior, the method is not missing. And it is behaving unexpectedly. What should we do? We at Ruby, and a lot of the Ruby culture has been influencing [Indiscernible ] . It is just like making a sharp knife. So I made the method access override. You can mix this into your Mash . We are going to set [Indiscernible ] . And now it will behave as it expected -- as we expected. Now it works. I am alienating a numerator. Now ZIP  response how you expected to. If Aaron Patterson was in the audience, he would tell you never to do this. Because you have the method Hash .